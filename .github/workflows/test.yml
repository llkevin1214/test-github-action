name: deployment

on:
  pull_request:
    types: [labeled, unlabeled, synchronize]
    branches:
      - main

jobs:
  get-prs-ready-for-testing:
    runs-on: ubuntu-latest
    outputs:
      prs: '${{ steps.get-prs.outputs.result }}'
    steps:
      - name: Get all open pull requests with the label 'Ready in Testing' and base main branch
        uses: actions/github-script@v7
        id: get-prs
        with:
          result-encoding: json
          script: |
            core.info(`Fetching all open pull requests' commits which have the label 'Ready in Testing'...`)

            const { data: all_pull_requests } = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              base: 'main',
              state: 'open',
            })
            all_pull_requests.sort((a, b) => a.number - b.number)

            if(all_pull_requests.length === 0){
              core.notice(`No open pull requests with the label 'Ready in Testing'`)
              return []
            }

            core.info(`Found ${all_pull_requests.length} open pull requests: `)
            core.info(`${all_pull_requests.map(pull_request => `#${pull_request.number}: ${pull_request.title}`).join('\n')}\n`)

            const ready_to_test_pull_requests = all_pull_requests.filter(pull_request =>
              pull_request.labels.some(label => label.name ==='Ready in Testing')
            )

            if(ready_to_test_pull_requests.length === 0){
              core.notice(`No pull requests with the label 'Ready in Testing' and base main branch be found.`)
              return []  
            }

            core.info(`Found ${ready_to_test_pull_requests.length} pull requests with the label 'Ready in Testing' and base main branch: `)
            core.info(`${ready_to_test_pull_requests.map(pull_request => `#${pull_request.number}: ${pull_request.title}`).join('\n')}\n`)

            const getCommitsOfPullRequest = async (pull_request) => {
              const { data: commits } = await github.rest.pulls.listCommits({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: pull_request.number,
              })
              return commits
            }

            let commitsCount = 0
            for(const pr of ready_to_test_pull_requests) {
              pr.commits = await getCommitsOfPullRequest(pr)
              commitsCount += pr.commits.length
            }

            if(commitsCount === 0){
              core.notice(`No corresponding commits found in any of the pull requests with the label 'Ready in Testing', base main branch.`)
              return []
            }

            core.info(`Found ${commitsCount} corresponding commits in total.`)
            core.info(`${ready_to_test_pull_requests.map(pull_request => `#${pull_request.number}: ${pull_request.title} (${pull_request.commits.length} commits): 
            \t${pull_request.commits.map(commit => commit.sha).join('\n\t')}`).join('\n')}\n`)

            core.info(`Get all commits of open pull requests with the label 'Ready in Testing', base main branch... DONE`)
            return ready_to_test_pull_requests.map(pull_request => ({
              number: pull_request.number,
              title: pull_request.title,
              commits: pull_request.commits.map(commit => ({
                sha: commit.sha,
                committer: commit.commit.committer,
              }))
            }))

  integrate-commits-for-testing:
    runs-on: ubuntu-latest
    needs: [get-prs-ready-for-testing]
    if: ${{ needs.get-prs-ready-for-testing.outputs.prs != '[]' }}
    outputs:
      hasDiff: ${{ steps.check-diff.outputs.hasDiff }}
    steps:
      - name: Checkout main branch
        uses: actions/checkout@v4
        with:
          ref: main

      - name: Fetch all branches
        run: git fetch --all

      - name: Create and switch to testing branch
        run: |
          git checkout -b testing

      - name: Cherry-pick commits from PRs
        uses: actions/github-script@v7
        with:
          script: |
            const prs = ${{ needs.get-prs-ready-for-testing.outputs.prs }}

            for (const pr of prs) {
              console.info(`Picking up PR #${pr.number}: ${pr.title}...`)
              for (const commit of pr.commits) {
                console.info(`\nIntegrating commit ${commit.sha}...`)

                try{
                  await exec.exec(`git config user.email "${commit.committer.email}"`)
                  await exec.exec(`git config user.name "${commit.committer.name}"`)
                  await exec.exec(`git cherry-pick ${commit.sha}`)
                }catch(error){
                  core.setFailed(`Failed to integrate #${pr.number}: ${pr.title} with commit ${commit.sha}: ${error}`)
                }
              }

              console.info(`Picking up PR #${pr.number}: ${pr.title}... DONE\n`)
            }

      - name: Push testing branch to remote if there are differences
        id: check-diff
        run: |
          git diff testing origin/testing > /tmp/diff_output.tmp

          if [ ! -s /tmp/diff_output.tmp ]; then
            echo "No differences found."
          else
            echo "Differences detected."
            git push origin testing --force
            echo "hasDiff=true" >> "$GITHUB_OUTPUT"
          fi

  trigger-deployment-testing:
    runs-on: ubuntu-latest
    needs: [get-prs-ready-for-testing, integrate-commits-for-testing]
    if: ${{ needs.get-prs-ready-for-testing.outputs.prs != '[]' && needs.integrate-commits-for-testing.outputs.hasDiff == 'true' }}
    env:
      comments:
    steps:
      - name: Get Clickup Task Custom Id
        id: get-clickup-task-custom-id
        uses: actions/github-script@v7
        with:
          result-encoding: json
          script: |
            const { data: all_comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: ${{github.event.number}},
            });

            const target_comment = all_comments.filter(comment => comment.user.login === 'grantit-develop')[0];
            const clickup_custom_id = target_comment.body.split('[')[1].trim();

            core.info(`clickup_custom_id: ${clickup_custom_id}`)

            core.setOutput('clickup_custom_id', clickup_custom_id);
      - name: Trigger testing deployment
        uses: peter-evans/repository-dispatch@v3
        with:
          event-type: testing-ci-finish
          client-payload: '{"ref": "testing", "clickupCustomId": "${{ steps.get-clickup-task-custom-id.outputs.clickup_custom_id }}"}'